diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.cpp
index 4ba0cd266553..941e3e2cf4f9 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecDRMPRIME.cpp
@@ -21,6 +21,7 @@
 #include "DVDVideoCodecDRMPRIME.h"
 
 #include "cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.h"
+#include "settings/AdvancedSettings.h"
 #include "threads/SingleLock.h"
 #include "utils/log.h"
 
@@ -251,6 +252,14 @@ bool CDVDVideoCodecDRMPRIME::AddData(const DemuxPacket& packet)
   // TODO: avpkt.side_data = static_cast<AVPacketSideData*>(packet.pSideData);
   // TODO: avpkt.side_data_elems = packet.iSideDataElems;
 
+  if (g_advancedSettings.CanLogComponent(LOGVIDEO))
+  {
+    CLog::Log(LOGDEBUG, "CDVDVideoCodecDRMPRIME::%s - packet.dts: %f", __FUNCTION__, packet.dts);
+    CLog::Log(LOGDEBUG, "CDVDVideoCodecDRMPRIME::%s - packet.pts: %f", __FUNCTION__, packet.pts);
+    CLog::Log(LOGDEBUG, "CDVDVideoCodecDRMPRIME::%s - avpkt.dts: %" PRId64, __FUNCTION__, avpkt.dts);
+    CLog::Log(LOGDEBUG, "CDVDVideoCodecDRMPRIME::%s - avpkt.pts: %" PRId64, __FUNCTION__, avpkt.pts);
+  }
+
   int ret = avcodec_send_packet(m_pCodecContext, &avpkt);
   if (ret == AVERROR(EAGAIN))
     return false;
@@ -313,6 +322,13 @@ void CDVDVideoCodecDRMPRIME::SetPictureParams(VideoPicture* pVideoPicture)
     pts = av_frame_get_best_effort_timestamp(m_pFrame);
   pVideoPicture->pts = (pts == AV_NOPTS_VALUE) ? DVD_NOPTS_VALUE : (double)pts * DVD_TIME_BASE / AV_TIME_BASE;
   pVideoPicture->dts = DVD_NOPTS_VALUE;
+
+  if (g_advancedSettings.CanLogComponent(LOGVIDEO))
+  {
+    CLog::Log(LOGDEBUG, "CDVDVideoCodecDRMPRIME::%s - m_pFrame->pts: %" PRId64, __FUNCTION__, m_pFrame->pts);
+    CLog::Log(LOGDEBUG, "CDVDVideoCodecDRMPRIME::%s - pVideoPicture->pts: %f", __FUNCTION__, pVideoPicture->pts);
+    CLog::Log(LOGDEBUG, "CDVDVideoCodecDRMPRIME::%s - pVideoPicture->dts: %f", __FUNCTION__, pVideoPicture->dts);
+  }
 }
 
 CDVDVideoCodec::VCReturn CDVDVideoCodecDRMPRIME::GetPicture(VideoPicture* pVideoPicture)
@@ -331,6 +347,9 @@ CDVDVideoCodec::VCReturn CDVDVideoCodecDRMPRIME::GetPicture(VideoPicture* pVideo
     return VC_ERROR;
   }
 
+  if (g_advancedSettings.CanLogComponent(LOGVIDEO))
+    CLog::Log(LOGDEBUG, "CDVDVideoCodecDRMPRIME::%s - frame:%p width:%u height:%u pts:%" PRId64, __FUNCTION__, m_pFrame, m_pFrame->width, m_pFrame->height, m_pFrame->pts);
+
   if (pVideoPicture->videoBuffer)
     pVideoPicture->videoBuffer->Release();
   pVideoPicture->videoBuffer = nullptr;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
index 20861464a684..4863ba670169 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
@@ -23,6 +23,7 @@
 #include "cores/VideoPlayer/VideoRenderers/RenderCapture.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderFactory.h"
 #include "utils/log.h"
+#include "windowing/gbm/DRMAtomic.h"
 
 static CWinSystemGbmGLESContext *m_pWinSystem;
 
@@ -214,16 +215,31 @@ void CRendererDRMPRIME::SetVideoPlane(CVideoBufferDRMPRIME* buffer)
     uint32_t src_w = buffer->GetWidth() << 16;
     uint32_t src_h = buffer->GetHeight() << 16;
 
-    // TODO: use atomic or legacy api
-
-    // show the video frame FB on the video plane
-    ret = drmModeSetPlane(m_DRM->m_fd, m_DRM->m_overlay_plane->plane->plane_id, m_DRM->m_crtc->crtc->crtc_id, buffer->m_fb_id, 0,
-                          crtc_x, crtc_y, crtc_w, crtc_h,
-                          src_x, src_y, src_w, src_h);
-    if (ret < 0)
+    if(m_DRM->m_req)
     {
-      CLog::Log(LOGERROR, "CRendererDRMPRIME::%s - failed to set drm plane %d, buffer = %d, ret = %d", __FUNCTION__, m_DRM->m_overlay_plane->plane->plane_id, buffer->m_fb_id, ret);
-      return;
+      std::shared_ptr<CDRMAtomic> atomic = std::dynamic_pointer_cast<CDRMAtomic>(m_DRM);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "FB_ID",   buffer->m_fb_id);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_ID", atomic->m_crtc->crtc->crtc_id);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "SRC_X",   src_x);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "SRC_Y",   src_y);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "SRC_W",   src_w);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "SRC_H",   src_h);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_X",  crtc_x);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_Y",  crtc_y);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_W",  crtc_w);
+      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_H",  crtc_h);
+    }
+    else
+    {
+      // show the video frame FB on the video plane
+      ret = drmModeSetPlane(m_DRM->m_fd, m_DRM->m_primary_plane->plane->plane_id, m_DRM->m_crtc->crtc->crtc_id, buffer->m_fb_id, 0,
+                            crtc_x, crtc_y, crtc_w, crtc_h,
+                            src_x, src_y, src_w, src_h);
+      if (ret < 0)
+      {
+        CLog::Log(LOGERROR, "CRendererDRMPRIME::%s - failed to set drm plane %d, buffer = %d, ret = %d", __FUNCTION__, m_DRM->m_primary_plane->plane->plane_id, buffer->m_fb_id, ret);
+        return;
+      }
     }
   }
 }
diff --git a/xbmc/windowing/gbm/DRMAtomic.cpp b/xbmc/windowing/gbm/DRMAtomic.cpp
index 0595a2105e0a..7963a8f2580f 100644
--- a/xbmc/windowing/gbm/DRMAtomic.cpp
+++ b/xbmc/windowing/gbm/DRMAtomic.cpp
@@ -23,6 +23,7 @@
 #include <string.h>
 #include <unistd.h>
 
+#include "guilib/GUIWindowManager.h"
 #include "settings/Settings.h"
 #include "utils/log.h"
 
@@ -115,58 +116,81 @@ bool CDRMAtomic::AddPlaneProperty(drmModeAtomicReq *req, struct plane *obj, cons
   return true;
 }
 
-bool CDRMAtomic::DrmAtomicCommit(int fb_id, int flags)
+void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer)
 {
   uint32_t blob_id;
+  struct plane *plane;
 
   if (flags & DRM_MODE_ATOMIC_ALLOW_MODESET)
   {
     if (!AddConnectorProperty(m_req, m_connector->connector->connector_id, "CRTC_ID", m_crtc->crtc->crtc_id))
     {
-      return false;
+      return;
     }
 
     if (drmModeCreatePropertyBlob(m_fd, m_mode, sizeof(*m_mode), &blob_id) != 0)
     {
-      return false;
+      return;
     }
 
     if (!AddCrtcProperty(m_req, m_crtc->crtc->crtc_id, "MODE_ID", blob_id))
     {
-      return false;
+      return;
     }
 
     if (!AddCrtcProperty(m_req, m_crtc->crtc->crtc_id, "ACTIVE", 1))
     {
-      return false;
+      return;
+    }
+
+    if (!videoLayer)
+    {
+      // disable overlay plane on modeset
+      AddPlaneProperty(m_req, m_overlay_plane, "FB_ID", 0);
+      AddPlaneProperty(m_req, m_overlay_plane, "CRTC_ID", 0);
     }
   }
 
-  AddPlaneProperty(m_req, m_primary_plane, "FB_ID", fb_id);
-  AddPlaneProperty(m_req, m_primary_plane, "CRTC_ID", m_crtc->crtc->crtc_id);
-  AddPlaneProperty(m_req, m_primary_plane, "SRC_X", 0);
-  AddPlaneProperty(m_req, m_primary_plane, "SRC_Y", 0);
-  AddPlaneProperty(m_req, m_primary_plane, "SRC_W", m_mode->hdisplay << 16);
-  AddPlaneProperty(m_req, m_primary_plane, "SRC_H", m_mode->vdisplay << 16);
-  AddPlaneProperty(m_req, m_primary_plane, "CRTC_X", 0);
-  AddPlaneProperty(m_req, m_primary_plane, "CRTC_Y", 0);
-  AddPlaneProperty(m_req, m_primary_plane, "CRTC_W", m_mode->hdisplay);
-  AddPlaneProperty(m_req, m_primary_plane, "CRTC_H", m_mode->vdisplay);
+  if (videoLayer)
+    plane = m_overlay_plane;
+  else
+    plane = m_primary_plane;
 
-  auto ret = drmModeAtomicCommit(m_fd, m_req, flags, nullptr);
-  if (ret)
+  if (rendered)
   {
-    return false;
+    AddPlaneProperty(m_req, plane, "FB_ID", fb_id);
+    AddPlaneProperty(m_req, plane, "CRTC_ID", m_crtc->crtc->crtc_id);
+    AddPlaneProperty(m_req, plane, "SRC_X", 0);
+    AddPlaneProperty(m_req, plane, "SRC_Y", 0);
+    AddPlaneProperty(m_req, plane, "SRC_W", m_mode->hdisplay << 16);
+    AddPlaneProperty(m_req, plane, "SRC_H", m_mode->vdisplay << 16);
+    AddPlaneProperty(m_req, plane, "CRTC_X", 0);
+    AddPlaneProperty(m_req, plane, "CRTC_Y", 0);
+    AddPlaneProperty(m_req, plane, "CRTC_W", m_mode->hdisplay);
+    AddPlaneProperty(m_req, plane, "CRTC_H", m_mode->vdisplay);
+  }
+  else if (videoLayer && !g_windowManager.HasVisibleControls())
+  {
+    // disable gui plane when video layer is active and gui has no visible controls
+    AddPlaneProperty(m_req, plane, "FB_ID", 0);
+    AddPlaneProperty(m_req, plane, "CRTC_ID", 0);
   }
 
-  drmModeAtomicFree(m_req);
+  auto ret = drmModeAtomicCommit(m_fd, m_req, flags | DRM_MODE_ATOMIC_TEST_ONLY, nullptr);
+  if (ret < 0)
+  {
+    CLog::Log(LOGERROR, "CDRMAtomic::%s - test commit failed: %s", __FUNCTION__, strerror(errno));
+  }
+  else if (ret == 0)
+  {
+    ret = drmModeAtomicCommit(m_fd, m_req, flags, nullptr);
+  }
 
+  drmModeAtomicFree(m_req);
   m_req = drmModeAtomicAlloc();
-
-  return true;
 }
 
-void CDRMAtomic::FlipPage(struct gbm_bo *bo)
+void CDRMAtomic::FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer)
 {
   uint32_t flags = 0;
 
@@ -176,18 +200,19 @@ void CDRMAtomic::FlipPage(struct gbm_bo *bo)
     m_need_modeset = false;
   }
 
-  struct drm_fb *drm_fb = CDRMUtils::DrmFbGetFromBo(bo);
-  if (!drm_fb)
+  struct drm_fb *drm_fb = nullptr;
+
+  if (rendered)
   {
-    CLog::Log(LOGERROR, "CDRMAtomic::%s - Failed to get a new FBO", __FUNCTION__);
-    return;
+    drm_fb = CDRMUtils::DrmFbGetFromBo(bo);
+    if (!drm_fb)
+    {
+      CLog::Log(LOGERROR, "CDRMAtomic::%s - Failed to get a new FBO", __FUNCTION__);
+      return;
+    }
   }
 
-  auto ret = DrmAtomicCommit(drm_fb->fb_id, flags);
-  if (!ret) {
-    CLog::Log(LOGERROR, "CDRMAtomic::%s - failed to commit: %s", __FUNCTION__, strerror(errno));
-    return;
-  }
+  DrmAtomicCommit(!drm_fb ? 0 : drm_fb->fb_id, flags, rendered, videoLayer);
 }
 
 bool CDRMAtomic::InitDrm()
diff --git a/xbmc/windowing/gbm/DRMAtomic.h b/xbmc/windowing/gbm/DRMAtomic.h
index dd296c142c0d..681fd2dbf152 100644
--- a/xbmc/windowing/gbm/DRMAtomic.h
+++ b/xbmc/windowing/gbm/DRMAtomic.h
@@ -27,16 +27,17 @@ class CDRMAtomic : public CDRMUtils
 public:
   CDRMAtomic() = default;
   ~CDRMAtomic() { DestroyDrm(); };
-  virtual void FlipPage(struct gbm_bo *bo) override;
+  virtual void FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer) override;
   virtual bool SetVideoMode(RESOLUTION_INFO res, struct gbm_bo *bo) override;
   virtual bool InitDrm() override;
   virtual void DestroyDrm() override;
 
+  bool AddPlaneProperty(drmModeAtomicReq *req, struct plane *obj, const char *name, int value);
+
 private:
   bool AddConnectorProperty(drmModeAtomicReq *req, int obj_id, const char *name, int value);
   bool AddCrtcProperty(drmModeAtomicReq *req, int obj_id, const char *name, int value);
-  bool AddPlaneProperty(drmModeAtomicReq *req, struct plane *obj, const char *name, int value);
-  bool DrmAtomicCommit(int fb_id, int flags);
+  void DrmAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer);
 
   bool m_need_modeset;
 };
diff --git a/xbmc/windowing/gbm/DRMLegacy.cpp b/xbmc/windowing/gbm/DRMLegacy.cpp
index 5b5c8867a216..7f91acb2853a 100644
--- a/xbmc/windowing/gbm/DRMLegacy.cpp
+++ b/xbmc/windowing/gbm/DRMLegacy.cpp
@@ -147,7 +147,7 @@ bool CDRMLegacy::QueueFlip(struct gbm_bo *bo)
   return true;
 }
 
-void CDRMLegacy::FlipPage(struct gbm_bo *bo)
+void CDRMLegacy::FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer)
 {
   flip_happening = QueueFlip(bo);
   WaitingForFlip();
diff --git a/xbmc/windowing/gbm/DRMLegacy.h b/xbmc/windowing/gbm/DRMLegacy.h
index 820676cdbf38..dbea53710d83 100644
--- a/xbmc/windowing/gbm/DRMLegacy.h
+++ b/xbmc/windowing/gbm/DRMLegacy.h
@@ -27,7 +27,7 @@ class CDRMLegacy : public CDRMUtils
 public:
   CDRMLegacy() = default;
   ~CDRMLegacy() { DestroyDrm(); };
-  virtual void FlipPage(struct gbm_bo *bo) override;
+  virtual void FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer) override;
   virtual bool SetVideoMode(RESOLUTION_INFO res, struct gbm_bo *bo) override;
   virtual bool InitDrm() override;
 
diff --git a/xbmc/windowing/gbm/DRMUtils.cpp b/xbmc/windowing/gbm/DRMUtils.cpp
index c5ffb95c95c3..84c30008e3e4 100644
--- a/xbmc/windowing/gbm/DRMUtils.cpp
+++ b/xbmc/windowing/gbm/DRMUtils.cpp
@@ -32,6 +32,7 @@
 #include "WinSystemGbmGLESContext.h"
 #include "guilib/gui3d.h"
 #include "utils/log.h"
+#include "utils/StringUtils.h"
 
 #include "DRMUtils.h"
 
@@ -347,6 +348,7 @@ bool CDRMUtils::GetPlanes()
   for (uint32_t i = 0; i < m_primary_plane->props->count_props; i++)
   {
     m_primary_plane->props_info[i] = drmModeGetProperty(m_fd, m_primary_plane->props->props[i]);
+    CLog::Log(LOGDEBUG, "CDRMUtils::%s - primary plane property: %s - %lld", __FUNCTION__, m_primary_plane->props_info[i]->name, (long long)m_primary_plane->props->prop_values[i]);
   }
 
   for (uint32_t i = 0; i < m_primary_plane->plane->count_formats; i++)
@@ -392,6 +394,7 @@ bool CDRMUtils::GetPlanes()
   for (uint32_t i = 0; i < m_overlay_plane->props->count_props; i++)
   {
     m_overlay_plane->props_info[i] = drmModeGetProperty(m_fd, m_overlay_plane->props->props[i]);
+    CLog::Log(LOGDEBUG, "CDRMUtils::%s - overlay plane property: %s - %lld", __FUNCTION__, m_overlay_plane->props_info[i]->name, (long long)m_overlay_plane->props->prop_values[i]);
   }
 
   fourcc = 0;
@@ -620,7 +623,6 @@ bool CDRMUtils::GetModes(std::vector<RESOLUTION_INFO> &resolutions)
     res.iSubtitles = static_cast<int>(0.965 * res.iHeight);
     res.fPixelRatio = 1.0f;
     res.bFullScreen = true;
-    res.strMode = m_connector->connector->modes[i].name;
     res.strId = std::to_string(i);
 
     if(m_connector->connector->modes[i].flags & DRM_MODE_FLAG_3D_MASK)
@@ -644,6 +646,8 @@ bool CDRMUtils::GetModes(std::vector<RESOLUTION_INFO> &resolutions)
       res.dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
     }
 
+    res.strMode = StringUtils::Format("%dx%d%s @ %.6f Hz", res.iScreenWidth, res.iScreenHeight,
+                                      res.dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "", res.fRefreshRate);
     resolutions.push_back(res);
   }
 
diff --git a/xbmc/windowing/gbm/DRMUtils.h b/xbmc/windowing/gbm/DRMUtils.h
index bb76b738b36c..04fae42b90c0 100644
--- a/xbmc/windowing/gbm/DRMUtils.h
+++ b/xbmc/windowing/gbm/DRMUtils.h
@@ -66,7 +66,7 @@ class CDRMUtils
 public:
   CDRMUtils();
   virtual ~CDRMUtils() = default;
-  virtual void FlipPage(struct gbm_bo *bo) {};
+  virtual void FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer) {};
   virtual bool SetVideoMode(RESOLUTION_INFO res, struct gbm_bo *bo) { return false; };
   virtual bool InitDrm();
   virtual void DestroyDrm();
diff --git a/xbmc/windowing/gbm/WinSystemGbm.cpp b/xbmc/windowing/gbm/WinSystemGbm.cpp
index 3ef426f677cf..a3e79ece0f4d 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbm.cpp
@@ -207,11 +207,11 @@ bool CWinSystemGbm::SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool bl
   return result;
 }
 
-void CWinSystemGbm::FlipPage()
+void CWinSystemGbm::FlipPage(bool rendered, bool videoLayer)
 {
   struct gbm_bo *bo = m_GBM->LockFrontBuffer();
 
-  m_DRM->FlipPage(bo);
+  m_DRM->FlipPage(bo, rendered, videoLayer);
 
   m_GBM->ReleaseBuffer();
 }
diff --git a/xbmc/windowing/gbm/WinSystemGbm.h b/xbmc/windowing/gbm/WinSystemGbm.h
index ee814c29c0a6..558697d552fd 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.h
+++ b/xbmc/windowing/gbm/WinSystemGbm.h
@@ -48,7 +48,7 @@ class CWinSystemGbm : public CWinSystemBase
   bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
   bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
 
-  void FlipPage();
+  void FlipPage(bool rendered, bool videoLayer);
   void WaitVBlank();
 
   void UpdateResolutions() override;
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
index f4f9a16b61a0..ccd2f660f438 100644
--- a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
@@ -142,10 +142,11 @@ void CWinSystemGbmGLESContext::PresentRender(bool rendered, bool videoLayer)
   if (!m_bRenderCreated)
     return;
 
-  if (rendered)
+  if (rendered || videoLayer)
   {
-    m_pGLContext.SwapBuffers();
-    CWinSystemGbm::FlipPage();
+    if (rendered)
+      m_pGLContext.SwapBuffers();
+    CWinSystemGbm::FlipPage(rendered, videoLayer);
   }
   else
   {
