#! /bin/sh

if [ ! -e config/options ]; then
  echo "Please run this script from Openbricks root directory"
  exit 1
fi

. config/options
get_meta kodi

$SCRIPTS/unpack kodi

ADDON_BASE="$PKG_BUILD_DIR/cmake/addons"
ADDON_PKG_PREFIX="$ROOT/packages/multimedia/kodi-addon-"
ADDON_KODIVER=$(grep "VERSION_MAJOR" "$PKG_BUILD_DIR/version.txt" | cut -f2 -d' ')

if [ -z "$ADDON_KODIVER" ]; then
  echo "Cannot determine Kodi version"
  exit 1
fi

# fetch addon repository
(cd $ADDON_BASE/bootstrap; cmake . -DCMAKE_INSTALL_PREFIX=../addons; make)


meta_url_rev () {
  local url_rev=$(grep "^ADDON_URL_REV_${ADDON_KODIVER}" "$1/meta" | grep -o "[0-9]*~\w*")
  [ -z "$url_rev" ] && url_rev=$(grep "^PKG_URL_REV" "$1/meta" | grep -o "[0-9]*~\w*")
  [ -z "$url_rev" ] && url_rev="0"
  echo "$url_rev"
}

next_url_rev () {
  local meta_url_rev="$1"
  local meta_githash="$(echo "$meta_url_rev" | cut -f2 -d~)"
  local meta_refnum="$(echo "$meta_url_rev" | cut -f1 -d~)"

  if [ -z "$meta_refnum" ]; then
    # invalid: let's start with 1
    refnum="1"
  elif [ "$meta_githash" = "$2" ]; then
    # same hash: keep
    refnum="$meta_refnum"
  else
    # hash has changed: increment
    refnum="$(expr $meta_refnum + 1)"
  fi

  echo "$refnum~$2"
}

create_meta () {
  cat > $1/meta <<EOF
ADDON_ID=""
ADDON_REPO=""
ADDON_BUILD_DEPENDS=""
ADDON_DEPENDS=""
ADDON_API=\$(get_meta kodi-platform; echo \${PKG_VERSION%+*})

ADDON_URL_REV_16="0~HEAD"
ADDON_REV_16="0"
ADDON_URL_REV_17="0~HEAD"
ADDON_REV_17="0"
ADDON_URL_REV_18="0~HEAD"
ADDON_REV_18="0"

PKG_NAME="kodi-addon-\${ADDON_ID}"
PKG_URL_REV=\$(valueof ADDON_URL_REV_\${ADDON_API})
PKG_REV=\$(valueof ADDON_REV_\${ADDON_API})
PKG_VERSION="\${ADDON_API}+\${ADDON_URL_REV_${ADDON_KODIVER}}"
PKG_URL="\${ADDON_REPO}/\${ADDON_ID}.git"
PKG_URL_PROTO=git
PKG_BUILD_DEPENDS="toolchain cmake kodi-platform \$ADDON_BUILD_DEPENDS \$ADDON_DEPENDS"
PKG_RUN_DEPENDS="\$TARGET_LIBC \$ADDON_DEPENDS"
PKG_PRIORITY=optional
PKG_SECTION=multimedia
PKG_SHORTDESC="Kodi addon \$ADDON_ID"
PKG_LONGDESC="Kodi addon \$ADDON_ID"
EOF
}

create_scripts () {
  cat > $1/build <<EOF
#! /bin/sh

. config/options

get_meta \$1
[ -z "\$PKG_REV" ] && exit 0

cd \$PKG_BUILD_DIR

do_cmake_build \\
  -DOVERRIDE_PATHS=1 \\
  -DCMAKE_MODULE_PATH=\$LIB_PREFIX/lib/kodi
EOF

  cat > $1/install <<EOF
#! /bin/sh

. config/options
get_meta \$1
[ -z "\$PKG_REV" ] && exit 0

cd \$PKG_BUILD_DIR

do_install usr/*
EOF

  chmod +x $1/build $1/install
}

echo "Updating addon packages for Kodi $ADDON_KODIVER.x"

for d in $ADDON_BASE/depends/common/*platform $ADDON_BASE/addons/*.*; do
  echo "Parsing $d..."
  addon=$(basename $d)
  addon_id=$(cut -f1 -d' ' "$d/$addon.txt")
  addon_url=$(cut -f2 -d' ' "$d/$addon.txt")
  addon_ref=$(cut -f3 -d' ' "$d/$addon.txt")

  if echo "$addon_ref" | grep -q "^[0-9a-fA-F]*$" ; then
    # we already have a hash...
    addon_githash="$(echo "${addon_ref}" | cut -b -7)"
  else
    # get hash for branch or tag name
    addon_githash="$(git ls-remote ${addon_url} ${addon_ref} | cut -b -7)"
  fi

  if [ -z "$addon_githash" ]; then
    echo "Failed to query hash for '$addon_ref' from $addon_url"
    continue
  fi

  # check for common libraries
  if [ "$(dirname $d)" = "$ADDON_BASE/depends/common" ]; then
    pkg_dir="$PLATFORM_PACKAGES/$addon_id"
    [ -d "$pkg_dir" ] || pkg_dir="$ROOT/$PACKAGES/multimedia/$addon_id"
    [ -d "$pkg_dir" ] || pkg_dir="$ROOT/$PACKAGES/libs/$addon_id"
    [ -d "$pkg_dir" ] || continue

    # query package revision string
    cur_url_rev=$(meta_url_rev ${pkg_dir})
    pkg_url_rev=$(next_url_rev ${cur_url_rev} ${addon_githash})

    [ "$pkg_url_rev" = "$cur_url_rev" ] && continue
    
    echo "$addon_id $addon_url $addon_ref $pkg_url_rev *"
    #continue

    sed \
      -i ${pkg_dir}/meta \
      -e "s%^PKG_URL_REV=.*%PKG_URL_REV=\"${pkg_url_rev}\"%" \
      -e "s%^PKG_URL=.*%PKG_URL=\"$(dirname ${addon_url})/$(basename ${addon_url} .git).git\"%" \
      -e "s%^PKG_REV=.*%PKG_REV=\"1\"%"

    continue
  fi

  # skip non-linux addons
  if ! grep -qwi 'all\|linux\|!android\|!windows\|!ios\|!rbpi' "$d/platforms.txt" ; then
    echo "${addon_id} not supported on Linux platform. Skipping..."
    continue
  fi

  # this is a new addon: create a package for it
  if [ ! -e ${ADDON_PKG_PREFIX}${addon_id}/meta ]; then
    echo "File ${ADDON_PKG_PREFIX}${addon_id}/meta not found. Creating new package..."
    #continue

    mkdir -p ${ADDON_PKG_PREFIX}${addon_id}
    create_meta ${ADDON_PKG_PREFIX}${addon_id}
    create_scripts ${ADDON_PKG_PREFIX}${addon_id}

    sed \
      -i ${ADDON_PKG_PREFIX}${addon_id}/meta \
      -e "s%^ADDON_ID=.*%ADDON_ID=\"${addon_id}\"%" \
      -e "s%^ADDON_REPO=.*%ADDON_REPO=\"$(dirname ${addon_url})\"%" \
      -e "s%^ADDON_URL_REV_${ADDON_KODIVER}=.*%ADDON_URL_REV_${ADDON_KODIVER}=\"1~${addon_githash}\"%" \
      -e "s%^ADDON_REV_${ADDON_KODIVER}=.*%ADDON_REV_${ADDON_KODIVER}=\"1\"%"

    continue
  fi

  # ensure that file name matches addon name
  if [ "$addon" != "$addon_id" ]; then
    echo "Addon name mismatch: \"${addon}\" should be \"${addon_id}\""
    continue
  fi

  # query package revision string
  cur_url_rev=$(meta_url_rev ${ADDON_PKG_PREFIX}${addon_id})
  pkg_url_rev=$(next_url_rev ${cur_url_rev} ${addon_githash})

  [ "$pkg_url_rev" = "$cur_url_rev" ] && continue

  echo "$addon_id $addon_url $addon_ref $pkg_url_rev *"
  #continue

  sed \
    -i ${ADDON_PKG_PREFIX}${addon_id}/meta \
    -e "s%^ADDON_ID=.*%ADDON_ID=\"${addon_id}\"%" \
    -e "s%^ADDON_REPO=.*%ADDON_REPO=\"$(dirname ${addon_url})\"%" \
    -e "s%^ADDON_URL_REV_${ADDON_KODIVER}=.*%ADDON_URL_REV_${ADDON_KODIVER}=\"${pkg_url_rev}\"%" \
    -e "s%^ADDON_REV_${ADDON_KODIVER}=.*%ADDON_REV_${ADDON_KODIVER}=\"1\"%"

done

exit 0
